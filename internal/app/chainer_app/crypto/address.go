package crypto

import (
	"chainer/internal/pkg/trustwallet/core"
	"encoding/hex"
	"fmt"
	"math/big"
)

const ByteCode = "608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b50d3801561003757600080fd5b50d2801561004457600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff021916908315150217905550610a7d806100af6000396000f3fe6080604052600436106100595760003560e01c806319ab453c146101055780633ccfd60b146101485780633ef13367146101525780635e949fa0146101955780636b9f96ea146101d8578063b269681d146101e257610100565b366101005760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156100c4573d6000803e3d6000fd5b507f8b49d864d6a7bf201ff87e7435d3f13b748b81cc6ee0cb5a804da1667587d9ef33346040516100f692919061087b565b60405180910390a1005b600080fd5b34801561011157600080fd5b50d3801561011e57600080fd5b50d2801561012b57600080fd5b5061014660048036038101906101419190610736565b610227565b005b61015061029a565b005b34801561015e57600080fd5b50d3801561016b57600080fd5b50d2801561017857600080fd5b50610193600480360381019061018e9190610709565b61038e565b005b3480156101a157600080fd5b50d380156101ae57600080fd5b50d280156101bb57600080fd5b506101d660048036038101906101d19190610736565b610524565b005b6101e06105f5565b005b3480156101ee57600080fd5b50d380156101fb57600080fd5b50d2801561020857600080fd5b5061021161067b565b60405161021e9190610837565b60405180910390f35b600060149054906101000a900460ff1661029757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff0219169083151502179055505b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f906108db565b60405180910390fd5b60003090503373ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561038a573d6000803e3d6000fd5b5050565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103ce919061081c565b60206040518083038186803b1580156103e657600080fd5b505afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610790565b9050600081141561042e57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610489929190610852565b602060405180830381600087803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190610763565b6104e457600080fd5b7fb4bdccee2343c0b5e592d459c20eb1fa451c96bf88fb685a11aecda6b4ec76b1308285604051610517939291906108a4565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a9906108db565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600030905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610677573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506106ae816109eb565b6106b78161090c565b905092915050565b6000813590506106ce81610a02565b6106d78161091e565b905092915050565b6000815190506106ee81610a19565b92915050565b60008151905061070381610a30565b92915050565b60006020828403121561071f5761071e6109bd565b5b600061072d8482850161069f565b91505092915050565b60006020828403121561074c5761074b6109bd565b5b600061075a848285016106bf565b91505092915050565b600060208284031215610779576107786109bd565b5b6000610787848285016106df565b91505092915050565b6000602082840312156107a6576107a56109bd565b5b60006107b4848285016106f4565b91505092915050565b6107c681610987565b82525050565b6107d58161091e565b82525050565b6107e48161090c565b82525050565b60006107f76010836108fb565b9150610802826109c2565b602082019050919050565b6108168161097d565b82525050565b600060208201905061083160008301846107db565b92915050565b600060208201905061084c60008301846107cc565b92915050565b600060408201905061086760008301856107bd565b610874602083018461080d565b9392505050565b600060408201905061089060008301856107db565b61089d602083018461080d565b9392505050565b60006060820190506108b960008301866107db565b6108c6602083018561080d565b6108d360408301846107db565b949350505050565b600060208201905081810360008301526108f4816107ea565b9050919050565b600082825260208201905092915050565b60006109178261093c565b9050919050565b60006109298261093c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600074ffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061099282610999565b9050919050565b60006109a4826109ab565b9050919050565b60006109b68261093c565b9050919050565b600080fd5b7f4f6e6c792064657374696e6174696f6e00000000000000000000000000000000600082015250565b6109f48161095c565b81146109ff57600080fd5b50565b610a0b8161095c565b8114610a1657600080fd5b50565b610a2281610930565b8114610a2d57600080fd5b50565b610a398161097d565b8114610a4457600080fd5b5056fea26474726f6e582212208a3ed8187e51c795527fcdaf8739049813afa6778adc0a5da326214024df8fe564736f6c63430008060033"
const DeployedBytecode = "6080604052600436106100595760003560e01c806319ab453c146101055780633ccfd60b146101485780633ef13367146101525780635e949fa0146101955780636b9f96ea146101d8578063b269681d146101e257610100565b366101005760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156100c4573d6000803e3d6000fd5b507f8b49d864d6a7bf201ff87e7435d3f13b748b81cc6ee0cb5a804da1667587d9ef33346040516100f692919061087b565b60405180910390a1005b600080fd5b34801561011157600080fd5b50d3801561011e57600080fd5b50d2801561012b57600080fd5b5061014660048036038101906101419190610736565b610227565b005b61015061029a565b005b34801561015e57600080fd5b50d3801561016b57600080fd5b50d2801561017857600080fd5b50610193600480360381019061018e9190610709565b61038e565b005b3480156101a157600080fd5b50d380156101ae57600080fd5b50d280156101bb57600080fd5b506101d660048036038101906101d19190610736565b610524565b005b6101e06105f5565b005b3480156101ee57600080fd5b50d380156101fb57600080fd5b50d2801561020857600080fd5b5061021161067b565b60405161021e9190610837565b60405180910390f35b600060149054906101000a900460ff1661029757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff0219169083151502179055505b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f906108db565b60405180910390fd5b60003090503373ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561038a573d6000803e3d6000fd5b5050565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103ce919061081c565b60206040518083038186803b1580156103e657600080fd5b505afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610790565b9050600081141561042e57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610489929190610852565b602060405180830381600087803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190610763565b6104e457600080fd5b7fb4bdccee2343c0b5e592d459c20eb1fa451c96bf88fb685a11aecda6b4ec76b1308285604051610517939291906108a4565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a9906108db565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600030905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610677573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506106ae816109eb565b6106b78161090c565b905092915050565b6000813590506106ce81610a02565b6106d78161091e565b905092915050565b6000815190506106ee81610a19565b92915050565b60008151905061070381610a30565b92915050565b60006020828403121561071f5761071e6109bd565b5b600061072d8482850161069f565b91505092915050565b60006020828403121561074c5761074b6109bd565b5b600061075a848285016106bf565b91505092915050565b600060208284031215610779576107786109bd565b5b6000610787848285016106df565b91505092915050565b6000602082840312156107a6576107a56109bd565b5b60006107b4848285016106f4565b91505092915050565b6107c681610987565b82525050565b6107d58161091e565b82525050565b6107e48161090c565b82525050565b60006107f76010836108fb565b9150610802826109c2565b602082019050919050565b6108168161097d565b82525050565b600060208201905061083160008301846107db565b92915050565b600060208201905061084c60008301846107cc565b92915050565b600060408201905061086760008301856107bd565b610874602083018461080d565b9392505050565b600060408201905061089060008301856107db565b61089d602083018461080d565b9392505050565b60006060820190506108b960008301866107db565b6108c6602083018561080d565b6108d360408301846107db565b949350505050565b600060208201905081810360008301526108f4816107ea565b9050919050565b600082825260208201905092915050565b60006109178261093c565b9050919050565b60006109298261093c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600074ffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061099282610999565b9050919050565b60006109a4826109ab565b9050919050565b60006109b68261093c565b9050919050565b600080fd5b7f4f6e6c792064657374696e6174696f6e00000000000000000000000000000000600082015250565b6109f48161095c565b81146109ff57600080fd5b50565b610a0b8161095c565b8114610a1657600080fd5b50565b610a2281610930565b8114610a2d57600080fd5b50565b610a398161097d565b8114610a4457600080fd5b5056fea26474726f6e582212208a3ed8187e51c795527fcdaf8739049813afa6778adc0a5da326214024df8fe564736f6c63430008060033"

// var (
// 	GenerateParkingAddress = generateParkingAddress
// )

//this file will needed all the functionality about address
// EOA addresses with private key and parking addresses with salt that gets from db
type byteArray []byte

// func DeployParkingTxTransaction(coinType string , id uint32 )()

func GenerateParkingAddress(coinType string, id uint32) (string, error) {
	var address string
	var addressBytes []byte
	var err error
	fmt.Println("passed Here", coinType)
	addressDP, err := getDPAddressBytes(core.CoinTypeTron, id)
	hashAddressDP := core.HashKeccak256(addressDP)
	fmt.Println("salt len :: ", len(hashAddressDP))
	fmt.Println("salt :: ", hashAddressDP)
	fmt.Println(hex.EncodeToString(hashAddressDP))
	z := new(big.Int)
	z.SetBytes(hashAddressDP)
	fmt.Println(z)
	// ["124", "18", "84", "11", "172", "231", "58", "11", "88", "47", "75", "220", "180", "62", "196", "139", "36", "136", "60", "237", "134", "206", "134", "25", "70", "227", "21", "208", "116", "23", "2", "47"]

	// idArray := (*[4]byte)(unsafe.Pointer(&id))[:]
	// salt, err := hashConcate(idArray, coinType)
	switch coinType {
	case "TRX":
		if deployingAddressBytes, err := getDeployerAddressBytes(core.CoinTypeTron); err == nil {
			fmt.Println("deployingAddress :: ", hex.EncodeToString(deployingAddressBytes))
			//double checked with bellow site
			//https://www.btcschools.net/tron/tron_tool_base58check_hex.php
			addressBytes, err = hashConcateToGenAddress([]byte(ByteCode), []byte{0x41}, deployingAddressBytes, hashAddressDP)
		}
	}
	address = core.Base58Address(addressBytes)

	return address, err

}
func hashConcateToGenAddress(bytecode, prefix, deployingAddrBytes, saltBytes []byte) ([]byte, error) {
	var concateInputs []byte
	concateInputs = append(concateInputs, core.HashKeccak256(bytecode)...)
	concateInputs = append(concateInputs, deployingAddrBytes...)
	concateInputs = append(concateInputs, saltBytes...)
	return append(prefix, core.HashKeccak256(concateInputs)[12:]...), nil

}

// func hashConcate(byteCode []byte, inputs ...string) ([]byte, error) {
// 	var concateInputs []byte
// 	concateInputs = append(concateInputs, core.HashKeccak256(byteCode)...)
// 	for _, input := range inputs {
// 		hexBytes, err := hex.DecodeString(input)
// 		if err != nil {
// 			return []byte{0}, nil
// 		}
// 		concateInputs = append(concateInputs, hexBytes...)
// 	}
// 	return core.HashKeccak256(concateInputs), nil

// }

// func hashConcate(inputs ...byteArray) []byte {
// 	var concateInputs []byte
// 	for _, input := range inputs {
// 		concateInputs = append(concateInputs, input...)
// 	}
// 	return core.HashKeccak256(concateInputs)

// // }
// fmt.Println("passed Here1", coinType)
// payloadBytes, err := hex.DecodeString("ff")
// if err != nil {
// 	fmt.Println(err)
// 	return "", err
// }
// fmt.Println("passed Here2", coinType)

// deployingAddressBytes, err := hex.DecodeString(deployingAddress)
// if err != nil {
// 	return "", err
// }
// fmt.Println("passed Here3", coinType)

// saltBytes, err := hex.DecodeString(salt)
// if err != nil {
// 	return "", err
// }
// fmt.Println("passed Here4", coinType)

// _ = deployingAddressBytes
// _ = saltBytes
// fmt.Println(reflect.TypeOf(payloadBytes))
// fmt.Println(reflect.TypeOf(byteArray{0}))

// fmt.Println("passed Here5", coinType)

// // address = hashConcate(payloadBytes, deployingAddressBytes, saltBytes)
